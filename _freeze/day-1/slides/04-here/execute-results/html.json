{
  "hash": "058dc4373e35c1502aa5bf304522f75f",
  "result": {
    "markdown": "---\ntitle: \"The `{here}` package\"\nsubtitle: Fire safety, continued\nformat: revealjs\nexecute: \n  eval: false\n---\n\n\n## The problem with `setwd()`\n\n-   `setwd()` changes the working directory, leading to potential issues in collaboration and reproducibility\n\n    -   You and I don't have the same file structure!\n    -   For example, my current working directory is\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    getwd()\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"/Users/l.smith/Documents/Teaching/Emory/epi590r-2023\"\n    ```\n    \n    \n    :::\n    :::\n\n\n-   It's also really annoying to change your working directory when you move around files and folders, even if it's just you using them\n\n## Do you think this code from 2015 still works?\n\n![](images/Screenshot 2023-08-13 at 11.08.36 AM.png)\n\n## Referring to files with the `here` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R\", \"functions.R\"))\n\ndat <- read_csv(here::here(\"data\", \"raw\", \"data.csv\"))\n\np <- ggplot(dat) + geom_point(aes(x, y))\n\nggsave(plot = p, \n       filename = here::here(\"results\", \"figures\", \"fig.pdf\"))\n```\n:::\n\n\nYou can also separate the file paths with `/`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_csv(here::here(\"data/raw/data.csv\"))\n```\n:::\n\n\n## How it works\n\n-   Construct file paths with reference to the top directory holding your `.Rproj` file.\n\n-   `here::here(\"data\", \"raw\", \"data.csv\")` for me, here, becomes `\"/Users/l.smith/Documents/Teaching/Emory/epi590r-2023/data/raw/data.csv\"`\n\n    -   If I change my working directory to somewhere else within my project, it will still give me that path\n\n-   And if I send you my code to run, it will become whatever file path *you* need it to be, as long as you're running it within the R Project.\n\n## Referring to the `here` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here()\n```\n:::\n\n\nis equivalent to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nhere()\n```\n:::\n\n\nI just prefer to write out the package name whenever I need it, but you can load the package for your entire session if you want.\n\n## Exercises\n\n1.  Install the `{here}` package:\n\n    | `install.packages(\"here\")`\n\n2.  Make sure you're in your in-class R project! In the console, run:\n\n    | `here::here()` to print your project directory\n    | `getwd()` to print your working directory\n\n    What do you notice?\n\n3.  In the console, run:\n\n    | `setwd(\"data\")` to set your working directory\n\n    Then run the same lines as above. What do you notice?\n\n## Exercises, cont.\n\n4.  Download the next `.R` script from the website and use your file browser to put it in the R folder in your project. \n- Run through the code line-by-line. \n- Compare it with the code from the last section.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_23828f34\" data-warn-when=\"180\" data-update-every=\"1\" tabindex=\"0\" style=\"right:33%;bottom:0;margin:5%;padding:25px;font-size:3em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::",
    "supporting": [
      "04-here_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}