{
  "hash": "80cce882949a0ec7f45ee135e585491b",
  "result": {
    "markdown": "---\ntitle: \"Git and GitHub\"\nsubtitle: \"A brief introduction\"\nformat: revealjs\n---\n\n\n## \n\n::: columns\n::: {.column width=\"50%\"}\n### Git\n\n-   version control system\n-   works offline (*repositories* exist on your computer)\n-   tracks changes via *commits*\n-   has a command-line interface and integrations with GUIs (like RStudio)\n:::\n\n::: {.column width=\"50%\"}\n### GitHub\n\n-   web-based platform built around Git\n-   provides a remote location for hosting Git repositories\n-   enables collaboration\n-   offers other features for project management (pull requests, issue tracking)\n:::\n:::\n\n## Our Git/GitHub goals\n\n-   For **you**: Keep track of progress on projects\n    -   Go back when you need to\n    -   Don't lose old work\n    -   Easily search the history of a project\n-   For **others**: Share your work\n    -   Have a place to store and link to code\n    -   Read and interact with others' code\n\nThere is a ***lot*** to learn about this topic and I am ***not*** an expert on everything!\n\n## What we won't cover {.smaller}\n\n-   Collaboration\n    -   When multiple people are working on the same GitHub project, things get a little more complex\n    -   I went though almost my whole PhD without working on shared GitHub projects and only now do I feel semi-confident collaborating!\n    -   I think it's best to figure things out in your own projects first\n-   Git on the command line\n    -   There are a lot of functions you might hear about (`git fetch`, `git merge`, etc.)\n    -   RStudio and GitHub will have everything we need!\n\n## \n\n![](images/github_friends.png)\n\n::: aside\nIllustrations from the [Openscapes](https://www.openscapes.org/) blog [**GitHub for supporting, contributing, and failing safely**](https://www.openscapes.org/blog/2022/05/27/github-illustrated-series/) by Allison Horst and Julia Lowndes.\n:::\n\n##  {background-image=\"images/68739659-fb6f-41e8-9813-32e1de3d82c0.png\" background-size=\"contain\"}\n\n::: aside\n[\\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## Workflow\n\nCreate a repository (clone from GitHub, or create on your computer and connect to GitHub)\n\n1.  Write some code!\n2.  When you complete \"something\", **add** it to the **staging** area\n3.  Write a brief description of what you did (\"added linear model\"; \"created table 1\") and **commit**\n4.  **Push** to GitHub\n5.  Repeat!\n\nAs long as you are working on your own, all on the same computer, you don't need to worry about pulling\n\n## What is a commit?\n\n![](images/78587c8b-fa99-4c94-bce2-026cf4e588b5.png)\n\n::: aside\nIllustrations from the [Openscapes](https://www.openscapes.org/) blog [**GitHub for supporting, contributing, and failing safely**](https://www.openscapes.org/blog/2022/05/27/github-illustrated-series/) by Allison Horst and Julia Lowndes.\n:::\n\n## What should you commit? Whatever you don't want to lose!\n\n![](images/e3538019-4520-46e6-b9ac-baee061888fc.png)\n\n::: aside\nIllustrations from the [Openscapes](https://www.openscapes.org/) blog [**GitHub for supporting, contributing, and failing safely**](https://www.openscapes.org/blog/2022/05/27/github-illustrated-series/) by Allison Horst and Julia Lowndes.\n:::\n\n##\n\n![](images/Screenshot%202023-08-12%20at%2010.18.48%20PM.png)\n\n## If you know that your code worked at 10am on October 21, 2015, and now it doesn't, you can return!\n\n![](images/635809824922215243-AP-BACK-TO-THE-FUTURE-DAY-76890712.webp)\n\n## Exercises\n\n1.  *Fork* the repo (repository) at <https://github.com/louisahsmith/epi590r-in-class>\n\n2.  On **your** fork of the repository, click the green \"Code\" button. We are going to *clone* the repository to your computer using *HTTPS*.\n\n## {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n**Forking**\n\n-   **Purpose:** Used to create a personal copy of another user's repository on your GitHub account.\n-   **Ownership:** The forked repository is still on the original owner's account, and you get your own copy to work with.\n-   **Collaboration:** Allows you to make changes without affecting the original repository. You can make changes, commit them to your fork, and then propose these changes to the original repository through pull requests.\n-   **Relationship:** The forked repository remains connected to the original, but changes aren't automatically synced.\n-   **Use Case:** Commonly used when you want to contribute to a project that you don't have direct write access to.\n:::\n\n::: {.column width=\"50%\"}\n**Cloning**\n\n-   **Purpose:** Used to make a local copy of a GitHub repository on your computer.\n-   **Ownership:** You have a read-write copy on your local machine, but it's not automatically linked to your GitHub account (you can do so through RStudio).\n-   **Collaboration:** Allows you to work on the project locally and make changes, but these changes aren't automatically visible to others.\n-   **Relationship:** The cloned repository is a standalone copy, and changes won't automatically affect the original or other clones.\n-   **Use Case:** Useful when you want to work on a project locally and have full control over commits and pushes.\n:::\n:::\n\n## You have a forked repo on GitHub, now you are cloning that forked repo on your own computer\n\n3.  Open up RStudio.\n\n-   File \\> New Project \\> \"Version Control\" \\> \"Git\"\n\n4.  Paste the URL to your fork\n\n-   Name the project directory (easiest if it has the same name as the repo)\n-   Choose where you want to store the project (remember this spot!)\n-   Create Project!\n\n\n##  {background-image=\"images/68739659-fb6f-41e8-9813-32e1de3d82c0.png\" background-size=\"contain\"}\n\n::: aside\n[\\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## Practice making a change, staging, committing, pushing\n\n5.  From the filepane in RStudio, open `README.md`\n\n-   Change the file and save your changes\n\n6.  In your Git pane, click on the checkbox to stage the file\n\n-   Then click \"Commit\"\n\n7.  You'll see a *diff* of the changes you made to that file\n\n-   Make sure all the changes look good!\n-   Describe what you did\n-   Commit\n-   Push\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_396aaa4a\" data-warn-when=\"180\" data-update-every=\"1\" tabindex=\"0\" style=\"right:33%;bottom:0;margin:5%;padding:25px;font-size:3em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [
      "02-github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}