{
  "hash": "ebb5f50c8e9021cc781e0ed6f71d77e2",
  "result": {
    "markdown": "---\ntitle: \"File management and projects in R\"\nsubtitle: \"or, How to keep your computer safe from fire\"\nformat: revealjs\n---\n\n\n## \n\nThere's a famous [blog post](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) about workflows in R[^1] about a talk [Jenny Bryan](https://jennybryan.org/) gave that included this slide:\n\n[^1]: yes, R blog posts can be famous\n\n> If the first line of your R script is\n>\n> ::: {.cell}\n> \n> ```{.r .cell-code}\n> setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\n> ```\n> :::\n>\n> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.\n>\n> If the first line of your R script is\n>\n> ::: {.cell}\n> \n> ```{.r .cell-code}\n> rm(list = ls())\n> ```\n> :::\n>\n> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.\n\n## Instead: project-oriented workflow\n\n-   R projects provide a structured and organized way to work on projects in R\n-   R projects encapsulate all project-related files and settings into a single directory\n-   RStudio makes it easy to work with R projects\n\n## R Projects (and related tools) can prevent a lot of accidents!\n\n![](images/bf93f860-9501-4dd6-a6e5-c26a3646fda5_rw_1920.png)\n\n::: aside\n[Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## R Projects\n\n::: columns\n::: {.column width=\"23%\"}\n```         \nmy-project/\nâ”œâ”€ my-project.Rproj\nâ”œâ”€ README.md\nâ”œâ”€ data/\nâ”‚   â”œâ”€ raw/\nâ”‚   â””â”€ processed/\nâ”œâ”€ R/\nâ”œâ”€ results/\nâ”‚   â”œâ”€ tables/\nâ”‚   â”œâ”€ figures/\nâ”‚   â””â”€ output/\nâ””â”€ docs/\n```\n:::\n\n::: {.column width=\"77%\"}\n-   An `.Rproj` file is mostly just a placeholder text file that lives in your project folder\n\n    -   It remembers various options, and makes it easy to open a new RStudio session that starts up in the correct working directory. You never need to edit it directly.\n\n-   Otherwise your project acts just like any other folder on your computer\n\n-   You can essentially turn any folder on your computer into an R project, or make a new one via RStudio when you create an R project\n:::\n:::\n\n## Benefits of R Projects\n\n1.  **Isolation**: Each project has its own workspace, separate from other projects\n2.  **Reproducibility**: Projects ensure that code and data are self-contained and portable\n3.  **Collaboration**: Projects facilitate collaboration by sharing the entire project directory\n\n## Always open a project by opening the `.Rproj` file\n\n::: panel-tabset\n## Mac\n\n![](../images/Screenshot%202023-08-10%20at%206.22.10%20PM.png){width=\"500\"}\n\n## Windows\n\n![](../images/Screenshot%202023-08-10%20at%206.28.46%20PM.png){width=\"500\"}\n:::\n\nYou can have multiple projects open at once in different RStudio sessions!\n\n## You can also switch between R projects from RStudio\n\n![](images/Screenshot%202023-08-12%20at%2011.49.37%20AM.png)\n\n-   Clicking the arrow icon will open it up in a new session and keep your current session open\n-   Opening an R project will also open all the files you had open last time (including unsaved \"Untitled\" files!)\n\n## Creating an R Project\n\n1.  Open RStudio and go to **File \\> New Project**, or click on the projects button in the upper-right corner of RStudio.\n2.  Choose a project location (New Directory, Version Control, Existing Directory).\n3.  Specify the project directory (where on your computer you are storing the folder with the project) and create the project.\n4.  Choose the project type (e.g., regular project, R package, Shiny app, Quarto website, Bookdown book)\n\n## You already have an R project!\n\nIn the exercises, we are going to make some more changes to the repo you *forked* and *cloned*\n\n1.  Download an `.R` script and a `.csv` file from the website\n\n-   We'll be using some data from the 1979 National Longitudinal Survey of Youth\n\n2.  Find your `epi590r-in-class` repo in your file browser\n\n-   Create an `R` folder and a `data` folder\n-   Within the `data` folder add a `raw` and a `clean` folder.\n-   Put the `.csv` file in the `data/raw` folder and the script in `R` folder.\n\n## File structure goal\n\n```         \nepi590r-in-class/\nâ”œâ”€ epi590r-in-class.Rproj\nâ”œâ”€ README.md\nâ”œâ”€ R/\nâ”‚   â””â”€ clean-data-bad.R\nâ”œâ”€ data/\nâ”‚   â”œâ”€ raw/\nâ”‚   â”‚  â””â”€ nlsy.csv\nâ”‚   â””â”€ clean/\n```\n\n## Exercises, cont.\n\n3.  Return to RStudio. If you closed RStudio, make sure you re-open this project. Look to the filepane to confirm the files are there.\n\n4.  Stage, commit, and push the changes you've made.\n\n5.  Try to run the code, line-by-line, in `clean-data-bad.R`.\n\n-   As you're running it, try to think of changes you might make\n\n## Stop for a settings change!\n\n6.  Tell RStudio to start fresh whenever you start a new session\n\n![](../images/Screenshot%202023-08-10%20at%205.14.32%20PM.png)\n\n7.  Close RStudio, then open it up again by opening the `epi590r-in-class.Rproj` file in your file browser\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_4b9efbf7\" data-warn-when=\"180\" data-update-every=\"1\" tabindex=\"0\" style=\"right:33%;bottom:0;margin:5%;padding:25px;font-size:3em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [
      "03-projects_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}