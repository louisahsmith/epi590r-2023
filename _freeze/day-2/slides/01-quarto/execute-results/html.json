{
  "hash": "a6744f5f5547d35e2cdd72cbfc433daa",
  "result": {
    "markdown": "---\ntitle: \"Reports and manuscripts with Quarto\"\nformat: revealjs\nexecute: \n  eval: true\n---\n\n\n## What is `quarto`?\n\n-   *Open-source document format and computational notebook system*\n-   Integrates text, code, and outout\n-   Can create multiple different types of products (documents, slides, websites, books)\n\n::: center\n![](https://github.com/rstudio/hex-stickers/blob/main/PNG/quarto.png?raw=true){height=\"300px\"}\n:::\n\n## Why not R Markdown?\n\nOnly because quarto is newer and more featured!\n\n-   Anything you already know how to do in R Markdown you can do in quarto, and more![^1]\n-   All of these slides, website, etc. are all made in quarto.\n-   If you know and love R Markdown, by all means keep using it!\n\n[^1]: Slight caveat...\n\n## Quarto workflow\n\n1.  Create a Quarto document\n2.  Write code\n3.  Write text\n4.  Repeat 2-3 in whatever order you want\n5.  Render\n\n## How does it work?\n\n-   You text in markdown and code in R\n-   `knitr` processes the code chunks, executes the R code, and inserts the code outputs (e.g., plots, tables) back into the markdown document\n-   `pandoc` transforms the markdown document into various output formats\n\n![](images/2b931008-dc7c-4bec-92cb-112a55126975.png)\n\n## Text and code...\n\n````         \n# My header\n\nSome text\n\nSome *italic text*\n\nSome **bold text**\n\n- Eggs\n- Milk\n\n```{{r}}\nx <- 3\nx\n```\n````\n\n## ... becomes ...\n\n### My title\n\nSome text\n\nSome *italic text*\n\nSome **bold text**\n\n-   Eggs\n-   Milk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n## If you prefer, you can use the visual editor\n\n![](images/Screenshot%202023-08-14%20at%209.41.22%20PM.png)\n\n## R chunks\n\nEverything within the chunks has to be valid R[^2]\n\n[^2]: You can also use other languages, like Python!\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nx <- 3\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nx + 4\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\nChunks run in order, continuously, like a single script\n\n## YAML\n\nAt the top of your Quarto document, a header written in *yaml* describes options for the document\n\n``` yml\n---\ntitle: \"My document\"\nauthor: Louisa Smith\nformat: html\n---\n```\n\nThere are a *ton* of possible options, but importantly, this determines the document output\n\n## Output\n\n![](images/6f28e7d4-3394-43f9-8b0d-41c52de3883f.png)\n\n<https://quarto.org/docs/output-formats/all-formats.html>\n\n## Exercises\n\nWe're going to focus on html output\n\n-   It's easy to transition to Word ([`format: docx`](https://quarto.org/docs/reference/formats/docx.html)) but it's not as good for constant re-rendering\n-   You need a LaTeX installation for pdf\n    -   I recommend [`{tinytex}`](https://yihui.org/tinytex/)\n\n## Exercises\n\nYou can choose whether you want to have chunk output show up within the document (vs. just the console) when you are running Quarto (and RMarkdown) documents interactively\n\n*Tools \\> Global options*\n\n![](images/Screenshot%202023-08-14%20at%208.35.58%20PM.png)\n\n## Exercises\n\nOpen up your epi590r-2023-in-class R project!\n\n*File \\> New File \\> Quarto Document*\n\n![](images/Screenshot%202023-08-14%20at%209.40.22%20PM.png)\n\n## Exercises\n\n-   Try toggling between Source and Visual views\n-   Toggle on and off the Outline\n-   Click Render and look at the output\n\n![](images/Screenshot%202023-08-14%20at%209.44.14%20PM.png)\n",
    "supporting": [
      "01-quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}