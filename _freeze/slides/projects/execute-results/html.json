{
  "hash": "da713a8928666db2671f0341fbdff369",
  "result": {
    "markdown": "---\ntitle: \"Workflow\"\nformat: revealjs\nexecute: \n  eval: false\n  echo: true\n---\n\n\n## \n\n\n::: {.cell}\n\n:::\n\n\n\n\nThere's a famous [blog post](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) about workflows in R[^1] about a talk [Jenny Bryan](https://jennybryan.org/) gave that included this slide:\n\n[^1]: yes, R blog posts can be famous\n\n> If the first line of your R script is\n>\n> ``` r\n> setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\n> ```\n>\n> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.\n>\n> If the first line of your R script is\n>\n> ::: {.cell}\n> \n> ```{.r .cell-code}\n> rm(list = ls())\n> ```\n> :::\n>\n> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.\n\n## The problem with `setwd()` \n\n- `setwd()` changes the working directory, leading to potential issues in collaboration and reproducibility\n  - You and I don't have the same file structure!\n  - For example, my current working directory is\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  getwd()\n  ```\n  :::\n\n- It's also really annoying to move around files and folders, even if it's just you using them\n\n## R Projects\n\n- R projects provide a structured and organized way to work on projects in R\n- R projects encapsulate all project-related files and settings into a single directory\n- RStudio makes it easy to work with R projects\n\n## R Projects\n\n:::: {.columns}\n\n::: {.column width=\"28%\"}\n```\nmy-project/\nâ”œâ”€ my-project.Rproj\nâ”œâ”€ README\nâ”œâ”€ data/\nâ”‚   â”œâ”€â”€ raw/\nâ”‚   â””â”€â”€ processed/\nâ”œâ”€ R/\nâ”œâ”€ results/\nâ”‚   â”œâ”€â”€ tables/\nâ”‚   â”œâ”€â”€ figures/\nâ”‚   â””â”€â”€ output/\nâ””â”€ docs/\n```\n\n:::\n\n::: {.column width=\"72%\"}\n- An `.Rproj` file is mostly just a placeholder. It remembers various options, and makes it easy to open a new RStudio session that starts up in the correct working directory. You never need to edit it directly.\n\n- A README file can just be a text file that includes notes for yourself or future users.\n\n- I like to have a folder for raw data -- which I never touch -- and a folder(s) for datasets that I create along the way.\n\n:::\n\n::::\n\n\n## Benefits of R Projects \n\n1. **Isolation**: Each project has its own workspace, separate from other projects\n2. **Reproducibility**: Projects ensure that code and data are self-contained and portable\n3. **Collaboration**: Projects facilitate collaboration by sharing the entire project directory\n\n## Creating an R Project \n1. Open RStudio and go to **File > New Project**, or click on the projects button in the upper-right corner of RStudeio.\n2. Choose a project location (New Directory, Version Control, Existing Directory).\n3. Specify the project directory and create the project.\n4. Choose the project type (e.g., regular project, Quarto website, Bookdown book)\n\n## The `{here}` Package \n- The `{here}` package simplifies file path management within R projects.\n- It provides a consistent and reliable way to reference files within the project directory.\n\n## Benefits of the `{here}` Package \n1. **Simplicity** : Avoids the need for manual file path manipulation with `setwd()` and `paste()` functions\n2. **Flexibility** : Works seamlessly even when scripts are run from different locations\n3. **Portability** : Ensures that file paths work consistently across different systems\n\n## Using `{here}` in your project \n1. Install the `{here}` package: `install.packages(\"here\")`. \n2. Load the `{here}` package in your R script: `library(here)`. \n3. Use the `here()` function to reference files within your project directory.\n\nI actually like to use `here::here()` rather than loading the package with `library(here)` every time.\n\n## Using `{here}` in your project \n\n- Construct file paths with reference to the top directory holding your `.Rproj` file.\n\n- `here::here(\"data\", \"raw\", \"data.csv\")` for me, here, becomes `\"/Users/l.smith/Documents/Presentations/reproducible-epi-SER/data/raw/data.csv\"`\n\n- But if I send you my code to run, it will become whatever file path *you* need it to be, as long as you're running it within the R Project.\n\n## Start fresh\n\n- `rm(list = ls())` removes objects from your environment, but it doesn't unload the packages\n\n- You can easily create errors of the type [`Error in... could not find function...`]{style=color:\"#bf616a\";} because your code runs just fine until you restart R and realize you never included the right `library()` calls\n\n- Restart your R session early and often as you write code!\n\n::: center\n![](img/restart.png)\n:::\n\n\n## Conclusion\n- Embrace the project-oriented workflow in R for better organization, reproducibility, and collaboration\n- Use R projects to encapsulate project-related files and settings\n- The `{here}` package helps with reliable and portable file path management\n\n### Additional Resources \n- Jenny Bryan's blog post: [Project-oriented workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/) \n- Another [blog post](https://malco.io/2018/11/05/why-should-i-use-the-here-package-when-i-m-already-using-projects/) by Malcolm Barrett\n- [`{here}` package documentation:](https://here.r-lib.org/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}