{
  "hash": "ba8912cc1f23e3262074c0fb02b34506",
  "result": {
    "markdown": "---\ntitle: \"{gtsummary}\"\nformat: revealjs\n---\n\n\n## What is `{gtsummary}`?\n\n-   Create tables that are publication-ready\n-   Highly customizable\n-   Descriptive tables, regression tables, etc.\n\n::: center\n![](https://github.com/ddsjoberg/gtsummary/raw/main/man/figures/logo.png){height=\"300px\"}\n:::\n\n## `gtsummary::tbl_summary()`\n\n::: {style=\"height: 0px;\"}\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n::: {.cell}\n\n:::\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nlibrary(gtsummary)\n\ntbl_summary(\n  nlsy,\n  by = sex_cat,\n  include = c(sex_cat, race_eth_cat, region_cat,\n              eyesight_cat, glasses, age_bir))\n```\n:::\n\n\n##  {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_summary(\n  nlsy,\n  by = sex_cat,\n  include = c(sex_cat, race_eth_cat, region_cat,\n              eyesight_cat, glasses, age_bir),\n  label = list(\n    race_eth_cat ~ \"Race/ethnicity\",\n    region_cat ~ \"Region\",\n    eyesight_cat ~ \"Eyesight\",\n    glasses ~ \"Wears glasses\",\n    age_bir ~ \"Age at first birth\"\n  ),\n  missing_text = \"Missing\")\n```\n:::\n\n\n##  {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_summary(\n  nlsy,\n  by = sex_cat,\n  include = c(sex_cat, race_eth_cat,\n              eyesight_cat, glasses, age_bir),\n  label = list(\n    race_eth_cat ~ \"Race/ethnicity\",\n    eyesight_cat ~ \"Eyesight\",\n    glasses ~ \"Wears glasses\",\n    age_bir ~ \"Age at first birth\"\n  ),\n  missing_text = \"Missing\") |> \n  add_p(test = list(all_continuous() ~ \"t.test\", \n                    all_categorical() ~ \"chisq.test\")) |> \n  add_overall(col_label = \"**Total**\") |> \n  bold_labels() |> \n  modify_footnote(update = everything() ~ NA) |> \n  modify_header(label = \"**Variable**\", p.value = \"**P**\")\n```\n:::\n\n\n## `tbl_summary()`\n\n-   Incredibly customizeable\n-   Really helpful with Table 1\n-   I often just view in the web browser and copy and paste into a Word document\n-   Can also be used within quarto/R Markdown[^1]\n-   If output is Word, I use `as_flex_table()`\n-   Make even more customizeable with `as_gt()`\n    -   Then can output to Word with `gt::as_word()`\n\n[^1]: This is where the bug comes in; soon to be fixed!\n\n## Univariate regressions\n\nFit a series of univariate regressions of income on other variables.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_uvregression(\n  nlsy, \n  y = income,\n  include = c(sex_cat, race_eth_cat,\n              eyesight_cat, income, age_bir),\n  method = lm)\n```\n:::\n\n\n## Can also do logistic regression\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_uvregression(\n  nlsy, \n  y = glasses,\n  include = c(sex_cat, race_eth_cat,\n              eyesight_cat, glasses, age_bir),\n  method = glm,\n  method.args = list(family = binomial()),\n  exponentiate = TRUE)\n```\n:::\n\n\nCustomizable just like `tbl_summary()`\n\n## Some regressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_model <- lm(income ~ sex_cat + age_bir + race_eth_cat, \n                   data = nlsy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_model_int <- lm(income ~ sex_cat*age_bir + race_eth_cat, \n                   data = nlsy)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_model <- glm(glasses ~ eyesight_cat + sex_cat + income, \n                      data = nlsy, family = binomial())\n```\n:::\n\n\n## `gtsummary::tbl_regression()` {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_regression(\n  linear_model, \n  intercept = TRUE,\n  label = list(\n    sex_cat ~ \"Sex\",\n    race_eth_cat ~ \"Race/ethnicity\",\n    age_bir ~ \"Age at first birth\"\n  ))\n```\n:::\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ntbl_regression(\n  logistic_model, \n  exponentiate = TRUE,\n  label = list(\n    sex_cat ~ \"Sex\",\n    eyesight_cat ~ \"Eyesight\",\n    income ~ \"Income\"\n  ))\n```\n:::\n\n\n## You could put several together\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_no_int <- tbl_regression(\n  linear_model, \n  intercept = TRUE,\n  label = list(\n    sex_cat ~ \"Sex\",\n    race_eth_cat ~ \"Race/ethnicity\",\n    age_bir ~ \"Age at first birth\"\n  ))\n\ntbl_int <- tbl_regression(\n  linear_model_int, \n  intercept = TRUE,\n  label = list(\n    sex_cat ~ \"Sex\",\n    race_eth_cat ~ \"Race/ethnicity\",\n    age_bir ~ \"Age at first birth\",\n    `sex_cat:age_bir` ~ \"Sex/age interaction\"\n  ))\n```\n:::\n\n\n## You could put several together\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl_merge(list(tbl_no_int, tbl_int), \n          tab_spanner = c(\"**Model 1**\", \"**Model 2**\"))\n```\n:::\n\n\n## Inline text\n\n\n\n## bonus: `broom::tidy()`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nbind_rows(\n  broom::tidy(linear_model, conf.int = TRUE),\n  broom::tidy(linear_model_int, conf.int = TRUE),\n  .id = \"model\"\n) |>\n  mutate(model = factor(model, \n                        labels = c(\"main terms\", \"sex-age interaction\"))) |> \n  ggplot(aes(x = term, y = estimate, \n             ymin = conf.low, ymax = conf.high,\n             color = model)) +\n  geom_point(position = position_dodge(width = .5)) +\n  geom_errorbar(position = position_dodge(width = .5))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}