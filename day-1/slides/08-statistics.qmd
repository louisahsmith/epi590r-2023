---
title: "Finer control over statistics"
format: revealjs
filters:
  - code-fullscreen
execute: 
  eval: true
  echo: true
---

```{r}
#| echo: false
#| message: false
library(tidyverse)
nlsy_cols <- c("glasses", "eyesight", "sleep_wkdy", "sleep_wknd", 
               "id", "nsibs", "samp", "race_eth", "sex", "region", 
               "income", "res_1980", "res_2002", "age_bir")
nlsy <- read_csv(here::here("data", "nlsy.csv"), 
                 na = c("-1", "-2", "-3", "-4", "-5", "-998"),
                 skip = 1, col_names = nlsy_cols) |> 
  mutate(region_cat = factor(region, labels = c("Northeast", "North Central", "South", "West")),
         sex_cat = factor(sex, labels = c("Male", "Female")),
         race_eth_cat = factor(race_eth, labels = c("Hispanic", "Black", "Non-Black, Non-Hispanic")),
         eyesight_cat = factor(eyesight, labels = c("Excellent", "Very good", "Good", "Fair", "Poor"))) 
library(gtsummary)
```

## We fit a series of univariate regressions

```{r}
#| output-location: column
income_table <- tbl_uvregression(
  nlsy,
  y = income,
  include = c(
    sex_cat, race_eth_cat,
    eyesight_cat, income, age_bir
  ),
  method = lm
)
income_table
```

## But a table is a limited form of output

We might want to dig in a little more to those regressions

-   One helpful option from `{gtsummary}` is to extract data from the table directly
- This can be reported in a manuscript (rather than copying and pasting from the table)

```{r}
inline_text(income_table, variable = "age_bir")
```

We'll look at this again later!

## What if we want *all* the numbers, say to create a figure?

-   Under the hood, `{gtsummary}` is using the `{broom}` package to extract the statistics from the various models
-   We can also use that package directly!

::: center
![](https://github.com/rstudio/hex-stickers/raw/main/PNG/broom.png){height="300px"}
:::

## Statistical models in R can be messy

```{r}
mod_sex_cat <- lm(income ~ sex_cat, data = nlsy)
```

We could look at the model summary:
```{r}
summary(mod_sex_cat)
```

## Statistical models in R can be messy

If we want to do something with the various values, we could extract each statistic individually:
```{r}
coef(mod_sex_cat)
confint(mod_sex_cat)
summary(mod_sex_cat)$r.squared
summary(mod_sex_cat)$coefficients
```

## `{broom}` has three main functions: `augment()`, `glance()`, `tidy()`

`augment()` adds fitted values, residuals, and other statistics to the original data

```{r}
library(broom)
augment(mod_sex_cat)
```


## `{broom}` has three main functions: `augment()`, `glance()`, `tidy()`

`glance()` creates a table of statistics that pertain to the entire model

```{r}
glance(mod_sex_cat)
```

## `{broom}` has three main functions: `augment()`, `glance()`, `tidy()`

`tidy()` is the most useful to me and probably you!

It extracts coefficients and confidence intervals from models

```{r}
tidy(mod_sex_cat, conf.int = TRUE)
```

## `tidy()` works on over 100 statistical methods in R!

Anova, ARIMA, Cox, factor analysis, fixed effects, GAM, GEE, IV, kappa, kmeans, multinomial, proportional odds, principal components, survey methods, ...

- See the full list [here](https://broom.tidymodels.org/articles/available-methods.html)
- All the output shares column names
- This makes it really easy to work with the output and reuse code across analyses

## Some models have additional arguments

For example, we might want exponentiated coefficients:
```{r}
logistic_model <- glm(glasses ~ eyesight_cat + sex_cat + income,
                      data = nlsy, family = binomial())
tidy(logistic_model, conf.int = TRUE, exponentiate = TRUE)
```

## We can also combine the results of lots of regressions

```{r}
# we already made mod_sex_cat
mod_race_eth_cat <- lm(income ~ race_eth_cat, data = nlsy)
mod_eyesight_cat <- lm(income ~ eyesight_cat, data = nlsy)
mod_age_bir <- lm(income ~ age_bir, data = nlsy)

tidy_sex_cat <- tidy(mod_sex_cat, conf.int = TRUE)
tidy_race_eth_cat <- tidy(mod_race_eth_cat, conf.int = TRUE)
tidy_eyesight_cat <- tidy(mod_eyesight_cat, conf.int = TRUE)
tidy_age_bir <- tidy(mod_age_bir, conf.int = TRUE)
```
::: aside
There are of course more efficient ways to do this instead of copy/pasting 4 times... we'll see more tomorrow
:::

## With a little finagling, we have the same data as in the original univartiate regression table...
```{r}
#| output-location: slide
dplyr::bind_rows(
  sex_cat = tidy_sex_cat,
  race_eth_cat = tidy_race_eth_cat,
  eyesight_cat = tidy_eyesight_cat,
  age_bir = tidy_age_bir, .id = "model") |>
  dplyr::mutate(
    term = stringr::str_remove(term, model),
    term = ifelse(term == "", model, term))
```

## Even easier cleanup!

We could instead clean up the names and add reference rows with the `{tidycat}` package:

```{r}
tidy(logistic_model, conf.int = TRUE, exponentiate = TRUE) |> 
  tidycat::tidy_categorical(logistic_model, exponentiate = TRUE) |>
  dplyr::select(-c(3:5))
```

## This makes it easy to make forest plots, for example

```{r}
#| output-location: slide
library(ggplot2)
tidy(logistic_model, conf.int = TRUE, exponentiate = TRUE) |> 
  tidycat::tidy_categorical(logistic_model, exponentiate = TRUE) |> 
  dplyr::slice(-1) |> # remove intercept
  ggplot(mapping = aes(x = level, y = estimate, 
                       ymin = conf.low, ymax = conf.high)) +
  geom_point() +
  geom_errorbar() +
  facet_grid(cols = vars(variable), scales = "free", space = "free") +
  scale_y_log10()
```

## Exercises

1. Download a new script with these examples.
2. Run it.
3. Teach yourself to use `broom::tidy()` to extract the results of the Poisson regression with robust standard errors and combine them with the results of the log-binomial regression.
4. Start creating some tables for your final project!

```{r}
#| echo: false
#| eval: true
countdown::countdown(
  minutes = 15,
  warn_when = 60*3,
  right = "33%",
  padding = "25px",
  margin = "5%",
  font_size = "3em",
  color_warning_background = "#ebcb8b",
  color_text                = "black",
  color_running_background  = "#8fbcbb",
  color_running_text        = "#eceff4",
  color_finished_background = "#bf616a",
  color_finished_text       = "#eceff4"
)
```