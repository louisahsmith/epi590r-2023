---
title: "Regression tables with `{gtsummary}`"
subtitle: On to Table 2!
format: revealjs
filters:
  - code-fullscreen
execute: 
  eval: true
---

## Univariate regressions

```{r}
#| echo: false
#| message: false
library(tidyverse)
nlsy_cols <- c("glasses", "eyesight", "sleep_wkdy", "sleep_wknd", 
               "id", "nsibs", "samp", "race_eth", "sex", "region", 
               "income", "res_1980", "res_2002", "age_bir")
nlsy <- read_csv(here::here("data", "nlsy.csv"), 
                 na = c("-1", "-2", "-3", "-4", "-5", "-998"),
                 skip = 1, col_names = nlsy_cols) |> 
  mutate(region_cat = factor(region, labels = c("Northeast", "North Central", "South", "West")),
         sex_cat = factor(sex, labels = c("Male", "Female")),
         race_eth_cat = factor(race_eth, labels = c("Hispanic", "Black", "Non-Black, Non-Hispanic")),
         eyesight_cat = factor(eyesight, labels = c("Excellent", "Very good", "Good", "Fair", "Poor"))) 
library(gtsummary)
```

Fit a series of univariate regressions of income on other variables.

```{r}
#| output-location: column
tbl_uvregression(
  nlsy, 
  y = income,
  include = c(sex_cat, race_eth_cat,
              eyesight_cat, income, age_bir),
  method = lm)
```

## Can also do logistic regression

```{r}
#| output-location: column
tbl_uvregression(
  nlsy, 
  y = glasses,
  include = c(sex_cat, race_eth_cat,
              eyesight_cat, glasses, age_bir),
  method = glm,
  method.args = list(family = binomial()),
  exponentiate = TRUE)
```

## We probably want to do some multivariable regressions

```{r}
linear_model <- lm(income ~ sex_cat + age_bir + race_eth_cat, 
                   data = nlsy)
```

```{r}
linear_model_int <- lm(income ~ sex_cat*age_bir + race_eth_cat, 
                   data = nlsy)
```

```{r}
logistic_model <- glm(glasses ~ eyesight_cat + sex_cat + income, 
                      data = nlsy, family = binomial())
```

## `gtsummary::tbl_regression()` {.smaller}

```{r}
#| output-location: column
tbl_regression(
  linear_model, 
  intercept = TRUE,
  label = list(
    sex_cat ~ "Sex",
    race_eth_cat ~ "Race/ethnicity",
    age_bir ~ "Age at first birth"
  ))
```
## `gtsummary::tbl_regression()` {.smaller}

```{r}
#| output-location: column
tbl_regression(
  logistic_model, 
  exponentiate = TRUE,
  label = list(
    sex_cat ~ "Sex",
    eyesight_cat ~ "Eyesight",
    income ~ "Income"
  ))
```


## Arguments

```{r, echo = FALSE}
tibble::tribble(
  ~Argument, ~Description,
  "`label=`", "modify variable labels in table",
  "`exponentiate=`", "exponentiate model coefficients",
  "`include=`", "names of variables to include in output. Default is all variables",
  "`show_single_row=`", "By default, categorical variables are printed on multiple rows. If a variable is dichotomous and you wish to print the regression coefficient on a single row, include the variable name(s) here.",
  "`conf.level=`", "confidence level of confidence interval",
  "`intercept=`", "indicates whether to include the intercept",
  "`estimate_fun=`", "function to round and format coefficient estimates",
  "`pvalue_fun=`", "function to round and format p-values",
  "`tidy_fun=`", "function to specify/customize tidier function"
) %>%
  gt::gt() %>%
  gt::fmt_markdown(columns = c(Argument))
```

::: aside
From <https://www.danieldsjoberg.com/gtsummary/articles/tbl_regression.html>
:::

## You could put several together

```{r}
tbl_no_int <- tbl_regression(
  linear_model, 
  intercept = TRUE,
  label = list(
    sex_cat ~ "Sex",
    race_eth_cat ~ "Race/ethnicity",
    age_bir ~ "Age at first birth"
  ))

tbl_int <- tbl_regression(
  linear_model_int, 
  intercept = TRUE,
  label = list(
    sex_cat ~ "Sex",
    race_eth_cat ~ "Race/ethnicity",
    age_bir ~ "Age at first birth",
    `sex_cat:age_bir` ~ "Sex/age interaction"
  ))
```

## You could put several together

```{r}
tbl_merge(list(tbl_no_int, tbl_int), 
          tab_spanner = c("**Model 1**", "**Model 2**"))
```

## Exercises

1. Download the script with some examples and save in your in-class project directory. 

2. Run the examples.

3-6. You're on your own again!

Extra time? Start a table using the data you downloaded for your final project! Make sure you switch to that R project!

```{r}
#| echo: false
#| eval: true
countdown::countdown(
  minutes = 15,
  warn_when = 60*3,
  right = "33%",
  padding = "25px",
  margin = "5%",
  font_size = "3em",
  color_warning_background = "#ebcb8b",
  color_text                = "black",
  color_running_background  = "#8fbcbb",
  color_running_text        = "#eceff4",
  color_finished_background = "#bf616a",
  color_finished_text       = "#eceff4"
)
```