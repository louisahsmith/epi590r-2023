---
title: "Package management with {renv}"
---


# Overview

`{renv}` is a package management tool for R that helps you create isolated and reproducible R environments. It allows you to specify the exact versions of R packages that your project depends on, ensuring that your code runs consistently across different environments.

With `{renv}`, you can create a project-specific library of packages, which are separate from your global R library. This allows you to have different versions of packages for different projects and ensures that your project dependencies are self-contained. `{renv}` also provides tools for managing and resolving package dependencies, making it easier to collaborate with others and share your code.

To use `{renv}` in your projects, set up the project environment by running `renv::init()`. This command creates an `renv.lock` file, which specifies the exact versions of packages needed for the project. Other people can then replicate the environment by running `renv::restore()` using the `renv.lock` file.

# Slides

Open the slides in a new tab [here](../slides/renv.html){target="_blank"}.

Download the slides as a new pdf [here](../slides/renv.pdf){target="_blank"}.

<div>

```{=html}
<iframe class="slide-deck" src="../slides/renv.html"></iframe>
```

</div>

# Exercise

1.  Download the `renv.lock` file [here](https://raw.githubusercontent.com/louisahsmith/reproducible-epi-workshop-2023/main/renv.lock).

-   If it downloads a file, navigate to your R project in your computer file system and replace the `renv.lock` file that's already there with this new one.
-   If it opens in the web browser, copy all the text and paste over the `renv.lock` file that's already in your R project.

2.  In your R project, run `renv::restore()`.

3.  Install a new R package of your choice. (Not sure what to choose? Try one of [these fun packages](https://medium.com/geekculture/15-fun-r-packages-you-may-not-know-of-fb25a9dcd627). For example, I did `install.packages("hadley/emo")`.)

4.  Create an R script and save it in your R project. Include some code that requires the package. For example:

```{r}
emo::ji("banana")
```

4.  Run `renv::status()` to make sure your project picked up the package as a dependency.

5.  Run `renv::snapshot()` to record that package in your lockfile.

6.  Open your lockfile and look for your new package. For example, mine now has:

```         
"emo": {
      "Package": "emo",
      "Version": "0.0.0.9000",
      "Source": "git",
      "RemoteType": "git",
      "RemoteUrl": "https://github.com/hadley/emo",
      "RemoteHost": "api.github.com",
      "RemoteUsername": "hadley",
      "RemoteRepo": "emo",
      "RemoteRef": "master",
      "RemoteSha": "3f03b11491ce3d6fc5601e210927eff73bf8e350",
      "Requirements": [
        "R",
        "assertthat",
        "crayon",
        "glue",
        "lubridate",
        "magrittr",
        "purrr",
        "rlang",
        "stringr",
        "utils"
      ],
      "Hash": "eb32b8f0bb50621ad498f5d836b546a4"
    },
```

# Resources

- [`{renv}` documentation](https://rstudio.github.io/renv/index.html)
